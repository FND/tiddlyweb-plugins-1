
A store that uses Python's SQLAlchemy package to talk to a
database. This is an exploration. Lots of cleanup can be done.

There is a test included in this directory, but the proper way
to test this code is to run against the TiddlyWeb core test suite,
with tiddlywebconfig.py set as follows:

config = {
    'server_store': ['sql', {}],
}

The current code uses a sqlite database called test.db in the 
current working database. This will change to use whatever
is sent in the configuration.

Some things are not yet supported:

* Created attribute and extended fields on tiddlers.
* Search.
* Users.
* Setting database type in config.
* Efficiently handling the mapping between tiddlyweb.model objects
  and SQLAlchemy ways. Currently a great deal of redundancy.
  By switching from the declarative_base to explicit Mappers
  things should clean up nicely.
* Primary key handling is fairly icky. Probably want to move to ids,
  plus some unique index fields.
* Data normalization is not what I'd like.
* Attend to any unicode issues.

These will come soon.

* When running against the tests, the created tables need to be dropped
  between tests.
